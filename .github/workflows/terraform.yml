name: "infra as a code"

on:
  push: 
    branches:
      - main
      - staging
    paths:
      - my_workspace/**

  pull_request:
    branches:
      - main
    paths:
      - my_workspace/**

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to destroy"
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: eu-north-1
  BUCKET_TF_STATE_STAGING: ${{ secrets.BUCKET_TF_STATE_STAGING }}
  BUCKET_TF_STATE_PROD: ${{ secrets.BUCKET_TF_STATE_PROD }}

jobs:
  terraform-staging:
    name: "Apply terraform code changes for staging"
    runs-on: ubuntu-latest
    concurrency:
      group: terraform-staging-${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        shell: bash
        working-directory: ./my_workspace/staging

    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on runner
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        id: init
        run: |
          for i in {1..3}; do
            terraform init -backend-config="bucket=${{ env.BUCKET_TF_STATE_STAGING }}" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=terraform-state-lock" && break
            echo "Retrying in 5 seconds..."
            sleep 5
          done

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan 
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
        id: apply
        run: terraform apply -auto-approve -input=false -parallelism=1 

  terraform-prod:
    name: "Apply terraform code changes for production"
    runs-on: ubuntu-latest
    concurrency:
      group: terraform-prod-${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        shell: bash
        working-directory: ./my_workspace/production

    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on runner
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        id: init
        run: |
          for i in {1..3}; do
            terraform init -backend-config="bucket=${{ env.BUCKET_TF_STATE_PROD }}" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=terraform-state-lock" && break
            echo "Retrying in 5 seconds..."
            sleep 5
          done

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan 
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: apply
        run: terraform apply -auto-approve -input=false -parallelism=1 

      - name: Terraform apply for pull request to main (production)
        if: github.event_name == 'pull_request' && github.base_ref == 'refs/heads/main'
        id: apply_pr
        run: terraform apply -auto-approve -input=false -parallelism=1

  terraform-destroy-staging:
    name: "Destroy staging environment"
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'staging'
    concurrency:
      group: terraform-destroy-staging-${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        shell: bash
        working-directory: ./my_workspace/staging

    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on runner
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        id: init
        run: |
          for i in {1..3}; do 
            terraform init -backend-config="bucket=${{ env.BUCKET_TF_STATE_STAGING }}" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=terraform-state-lock" && break       
            echo "Retrying in 5 seconds..."
            sleep 5
          done

      - name: Terraform destroy
        id: destroy
        run: |
          for i in {1..3}; do
            terraform destroy -auto-approve -input=false -parallelism=1 && break
            echo "Retrying in 5 seconds..."
            sleep 5
          done

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: List lock IDs from DynamoDB
        id: list_locks
        run: |
          aws dynamodb scan --table-name terraform-state-lock --filter-expression "attribute_exists(LockID)" > lock_ids.json

      - name: Remove state lock from DynamoDB
        id: remove_lock
        run: |
          LOCK_ID=$(jq -r '.Items[] | select(.ID.S == "terraform.tfstate") | .LockID.S' lock_ids.json)
          echo "Removing LockID: $LOCK_ID"
          aws dynamodb delete-item \
            --table-name terraform-state-lock \
            --key '{"LockID": {"S": "'$LOCK_ID'"}}'

  terraform-destroy-prod:
    name: "Destroy production environment"
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production'
    concurrency:
      group: terraform-destroy-prod-${{ github.ref }}
      cancel-in-progress: true
    defaults:
      run:
        shell: bash
        working-directory: ./my_workspace/production
     
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on runner
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        id: init
        run: |
          for i in {1..3}; do
            terraform init -backend-config="bucket=${{ env.BUCKET_TF_STATE_PROD }}" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=terraform-state-lock" && break
            echo "Retrying in 5 seconds..."
            sleep 5
          done

      - name: Terraform destroy
        id: destroy
        run: |
          for i in {1..3}; do
            terraform destroy -auto-approve -input=false -parallelism=1  && break
            echo "Retrying in 5 seconds..."
            sleep 5
          done

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: List lock IDs from DynamoDB
        id: list_locks
        run: |
          aws dynamodb scan --table-name terraform-state-lock --filter-expression "attribute_exists(LockID)" > lock_ids.json

      - name: Remove state lock from DynamoDB
        id: remove_lock
        run: |
          LOCK_ID=$(jq -r '.Items[] | select(.ID.S == "terraform.tfstate") | .LockID.S' lock_ids.json)
          echo "Removing LockID: $LOCK_ID"
          aws dynamodb delete-item \
            --table-name terraform-state-lock \
            --key '{"LockID": {"S": "'$LOCK_ID'"}}'